/// <reference types="node" />
export interface IHDR {
    /** width (4 bytes) */
    width: number;
    /** height (4 bytes) */
    height: number;
    /** bit depth (1 byte, values 1, 2, 4, 8, or 16) */
    bitDepth: number;
    /** color type (1 byte, values 0, 2, 3, 4, or 6) */
    colorType: number;
    /** compression method (1 byte, value 0) */
    compressionMethod: number;
    /** filter method (1 byte, value 0) */
    filterMethod: number;
    /** interlace method (1 byte, values 0 "no interlace" or 1 "Adam7 interlace") */
    interlaceMethod: number;
}
export declare function createIHDR(spec: IHDR): Buffer;
export declare function createPLTE(palette: number[] | number[][]): Buffer;
export declare function createIDAT(data: Buffer, width: number, height: number): Promise<Buffer>;
export declare function generateChunk(type: string, data: Buffer): Buffer;
export declare class IndexedPNG {
    private chunks;
    write(chunk: Buffer): void;
    writeChunk(type: string, data: Buffer): void;
    writeIEND(): void;
    writeHeader(): void;
    writeIHDR(spec: IHDR): void;
    writePLTE(palette: number[] | number[][]): void;
    writeTRNS(palette: number[]): void;
    writeIDAT(data: Buffer, width: number, height: number): Promise<void>;
    getData(): Buffer;
}
export declare function createPNG(data: Buffer, palette: number[] | number[][], width: number, height?: number): Promise<Buffer>;
export declare function createPNG(data: Buffer, palette: number[] | number[][], trnsPalette: number[], width: number, height?: number): Promise<Buffer>;
